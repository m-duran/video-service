buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.0.RELEASE'
	id 'com.palantir.docker' version '0.20.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'mduran'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-data-rest')
	runtimeOnly('com.h2database:h2')
	runtimeOnly('org.postgresql:postgresql')
	compileOnly('org.projectlombok:lombok')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	compile 'mysql:mysql-connector-java'
	// https://mvnrepository.com/artifact/com.github.paulcwarren/spring-content-rest
	compile group: 'com.github.paulcwarren', name: 'spring-content-rest-boot-starter', version: '0.8.0'
	// https://mvnrepository.com/artifact/com.github.paulcwarren/spring-content-s3
	compile group: 'com.github.paulcwarren', name: 'spring-content-s3-boot-starter', version: '0.8.0'


	// these were removed from jdk-11 so they must be included manually
	// https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-core
	compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'
	// https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
	// https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-impl
	compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.2'
}

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependecy")
}
docker {
	name "${project.group}/${bootJar.baseName}"
	tags 'latest'
	dependsOn build
	copySpec.from(tasks.unpack.outputs)into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
	dockerfile file('Dockerfile')
}
